import os
from pathlib import Path

import pytest
from click.testing import CliRunner


def test_locate_from_pyproject_yaml() -> None:
    from dagster_blueprints.cli import get_python_modules_from_pyproject

    sample_pyproject_path = Path(__file__).parent / "sample_blueprint_project" / "pyproject.toml"
    assert get_python_modules_from_pyproject(os.fspath(sample_pyproject_path)) == [
        "blueprint_project",
    ]


@pytest.mark.parametrize("explicit_loader_module", [True, False])
def test_generate_single_schema(explicit_loader_module: bool) -> None:
    from dagster_blueprints.cli import generate_schema

    sample_project_path = Path(__file__).parent / "sample_blueprint_project"

    expected_schema_filepaths = [
        (sample_project_path / "blueprint_project" / folder / "dagster.autogenerated.schema.json")
        for folder in ("blueprints", "other_blueprints")
    ]
    for expected_schema_filepath in expected_schema_filepaths:
        if expected_schema_filepath.exists():
            os.remove(expected_schema_filepath)

    os.chdir(sample_project_path)

    args = []
    if explicit_loader_module:
        args.extend(["--loader-module", "blueprint_project"])
    out = CliRunner().invoke(generate_schema, args)

    # file has two loaders, must explicitly specify
    assert out.exit_code == 1

    args.extend(["--loader-name", "loader"])
    out = CliRunner().invoke(generate_schema, args)
    assert '"SimpleAssetBlueprint"' in out.output
